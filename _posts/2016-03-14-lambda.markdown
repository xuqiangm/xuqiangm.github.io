---
title: C++11新特性：Lambda表达式
date: 2016-03-14
categories: c++
---


本文将介绍 C++11 中的一个新特性 Lambda 表达式,C++11引入了Lambda表达式，使得C++11增加了函数式编程范性的一面。这样C++就支持更多的范型编程，包括基于命令式编程范型的C语言部分，面向对象编程范型的部分以及函数式编程范型。

# 1. Lambda表达式基础

> [capture] (parameters) mutable -> return-type {statement}

各参数的含义

- \[capture\]：捕捉列表，同时也是lambda引出符
- \[parameters\]：参数列表，如果不需要参数传递，则可以省略
- mutable：mutable修饰符。默认情况下，lambda 函数总是一个 const 函数，mutable 可以取消其常量性。在使用该修饰符时，参数列表不可省略。
- ->return-type: 返回类型。用追踪返回类型形式声明函数的返回类型。可以省略，编译器可以对返回类型进行推导。
- {statement}: 函数体。内容与普通函数一样，不过除了可以使用参数外，还乐意使用所有捕获的变量。
最简略的lambda函数只需要声明为

```
[]{}
```

值得注意的是 Lambda表达式默认是 inline。简单的，可以有下这个例子说明下基本写法

``` cpp
#include <iostream>
using namespace std;

int main(){
	[] {};//最简 Lambda 函数

	int a = 3;
	int b = 4;
	[=] {return a+b;};   //省略了参数列表和返回类型，捕捉a,b按值传入

	auto totalChild = [](int x, int y)->int{ return x+y;};
	cout<<totalChild(1,4)<<endl;	//一般的写法

	int boys =4, girls = 3;
	auto total = [=]()->int{ return girls+boys+a+b+c; }; //捕获所有父作业域的变量，并按值传入,c无法被捕捉，报错
	int c = 5;
	cout<<total()<<endl;
	return 0;
}
```

lambda 函数的运算时基于初始状态进行的运算，这与函数简单基于函数的运算时有所不同的。

捕捉列表有如下几种形式：


- \[var\] 表示值传递方式捕捉变量 var
- \[=\] 表示值传递方式捕捉所有父作用域的变量（包括 this）
- \[&var\] 表示引用传递捕捉变量 var
- \[&\] 表示引用传递捕捉所有父作用域的变量（包括 this）
- \[this\] 表示值传递方式捕捉当前的 this 指针
- \[=,&a,&b\] 表示以引用传递的方式捕捉变量a和b，值传递方式捕捉其他所有变量
- \[&,a,this\] 表示以值传递的方式捕捉变量a和this，引用传递方式捕捉其他所有变量


由此可以引出一个值得关注的问题。在使用 lambda 函数的时候，按值方式传递捕捉列表和按引用方式传递捕捉列表是不一样的。对于按值方式传递的捕捉列表，**其传递的值在 lambda 函数定义的时候就已经决定了**；而按引用传递的捕捉列表变量，**其传递的值则在 lambda 函数调用时决定**。

```cpp
#include <iostream>
using namespace std;

int main(){
	int j = 12;
	auto by_val_lambda = [=] {return j+1;};
	auto by_ref_lambda = [&] {return j+1;};
	cout<<"by_val_lambda"<<by_val_lambda()<<endl;
	cout<<"by_ref_lambda"<<by_ref_lambda()<<endl;

	j++;
	cout<<"by_val_lambda"<<by_val_lambda()<<endl;
	cout<<"by_ref_lambda"<<by_ref_lambda()<<endl;
	return 0;
}
```

运行结果：
![](http://7xrvqe.com1.z0.glb.clouddn.com/16-3-15/28253622.jpg)

# 2. Lambda 与函数对象
首先认识一下函数对象，函数对象其实就是重新定义了成员函数 operator() 的一种自定义类型对象，并且在使用的时候在代码层面跟函数的使用一样，虽然本质是不同的。

```cpp
#include <iostream>
using namespace std;

class _function{
public:
	int operator() (int x,int y){
		return x+y;
	}
};

int main(){
	int x = 3, y = 4;
	_function a;
	cout<<a(x, y)<<endl;
	return 0;
}
```

相比函数，函数对象可以拥有初始状态，一般通过 class 定义私有成员，并在声明对象的时候对初始化。而实际上，函数对象是编译器实现 lambda 表达式的一种方式，函数对象中的初始状态（成员变量），对应着 lambda 中捕捉的上下文变量，因此在 C++11 中，lambda 可以视为函数对象的一种等价形式，或者说 lambda 是函数对象的语法糖。

知道了这个本质，那么就可以理解下面这段代码了。

```cpp
#include <iostream>
using namespace std;

int main(){
	int val=8;
	auto const_val_lambda = [=]() { val = 3;};  //编译失败，在const的lambda中修改捕捉的变量（相当于成员变量）
	auto mutable_val_lambda = [=]() mutable {val = 3;};  //正确，相当于用 mutable 修饰成员变量
	auto const_ref_lambda = [&]{ val=3; }; //正确，改变的是引用指向的值，人引用本身未改变

	auto const_param_lambda = [&](int v) { v=3; }; //正确，没问题，参数传递val，对 val 一点影响都没有
	const_param_lambda(val);
	cout<<val;
	return 0;
}
```

最后需要注意在 lambda 的捕捉列表仅能捕捉父作用域的变量，这实际上是因为使用 lambda 表达式大多是为了临时创建的、局部使用匿名函数。

```cpp
int d = 0;
int TryCaptrue(){
	auto ill_lambda = [d]{};
}
```

# 3. Lambda 与函数指针
lambda 的类型被定义为“闭包”的类，而每个 lambda 表达式会产生一个闭包类型的临时对象（右值）。因此 lambda函数并非函数指针，但是 lambda 表达式可以向函数指针转换，但需要满足两个条件：

- lambda 函数没有捕捉任何变量
- 函数所示的函数原型，必须跟 lambda 函数有着相同的调用方式 

关于两者的关系，可以通过以下代码理解：

```cpp
#include <iostream>
using namespace std;

int main(){
	int girls = 4, boys = 4;
	//定义了一个lambda表达式，注意参数列表和返回值
	auto lambda = [](int x,int y)->int{ return x+y; };
	//定义两个不同的函数原型
	typedef int (*funptr1) (int x, int y);
	typedef int (*funptr2) (int x);

	funptr1 p1;
	p1 = lambda;

	funptr2 p2;
	p2 = lambda; //编译失败

	decltype(lambda) _lambda = lambda;
	decltype(lambda) ptr_lambda = p1; //编译失败，指针无法转换为 lambda
	return 0;
}

```

lambda 与函数指针相比的优点有：
- 函数定义在别的地方，代码阅读不方便
- lambda 默认是 inline，可以提高效率

# 4. lambda 与 STL
lambda 的引入使用 STL 算法是，更流畅。比如

```cpp
#include <vector>
#include <algorithm>
#include <iostream>
using namespace std;

int main(){
	vector<int> nums{1,2,3,4,5,6,7};
	vector<int> largeNums;
	for_each(nums.begin(), nums.end(), [&](int i)mutable{
		if(i > 0){
			largeNums.push_back(i);
		}
	});
	cout<<largeNums[6];
	return 0;
}

```

### 参考文献
   
- 《深入理解C++11：C++11新特性解析与应用》 